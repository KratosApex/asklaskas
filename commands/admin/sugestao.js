const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const logger = require('../../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('sugestao')
    .setDescription('Envia uma sugest√£o para o servidor')
    .addStringOption(option =>
      option.setName('titulo')
        .setDescription('T√≠tulo da sugest√£o')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('descricao')
        .setDescription('Descri√ß√£o detalhada da sugest√£o')
        .setRequired(true)),

  async execute(interaction, client) {
    const titulo = interaction.options.getString('titulo');
    const descricao = interaction.options.getString('descricao');

    try {
      const suggestionsChannel = client.channels.cache.get(client.config.SUGGESTION_CHANNEL_ID);
      if (!suggestionsChannel) {
        return interaction.reply({
          content: '‚ùå Canal de sugest√µes n√£o configurado. Contate um administrador.',
          flags: 64
        });
      }

      const embed = new EmbedBuilder()
        .setColor(0x0099FF)
        .setTitle(`Sugest√£o: ${titulo}`)
        .setDescription(descricao)
        .addFields(
          { name: 'Autor', value: `<@${interaction.user.id}>`, inline: true },
          { name: 'Status', value: '‚è≥ Em an√°lise', inline: true },
          { name: 'Data', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: true }
        )
        .setFooter({ text: 'Use os bot√µes abaixo para votar nesta sugest√£o' })
        .setTimestamp();

      const row = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('suggestion_upvote')
            .setLabel('üëç A favor')
            .setStyle(ButtonStyle.Success),
          new ButtonBuilder()
            .setCustomId('suggestion_downvote')
            .setLabel('üëé Contra')
            .setStyle(ButtonStyle.Danger),
          new ButtonBuilder()
            .setCustomId('suggestion_comment')
            .setLabel('üí¨ Comentar')
            .setStyle(ButtonStyle.Primary)
        );

      const message = await suggestionsChannel.send({ embeds: [embed], components: [row] });

      // Adicionar rea√ß√µes iniciais
      await message.react('üëç');
      await message.react('üëé');

      await logger.logCommand(
        interaction,
        "Sugest√£o enviada",
        `Autor: <@${interaction.user.id}>\nT√≠tulo: ${titulo}\nMensagem: ${message.url}`
      );

      return interaction.reply({
        content: `‚úÖ Sua sugest√£o foi enviada com sucesso! Voc√™ pode v√™-la em <#${suggestionsChannel.id}>.`,
        flags: 64
      });
    } catch (error) {
      console.error(error);
      await logger.logError(`Comando ${interaction.commandName}`, error);
      return interaction.reply({
        content: '‚ùå Ocorreu um erro ao enviar sua sugest√£o.',
        flags: 64
      });
    }
  },

  // Adicionar o manipulador de intera√ß√µes para os bot√µes
  async handleInteraction(interaction, client) {
    if (!interaction.isButton()) return;

    // Verificar se √© um dos bot√µes de sugest√£o
    if (interaction.customId.startsWith('suggestion_')) {
      try {
        // Primeiro, informar ao Discord que recebemos a intera√ß√£o
        await interaction.deferUpdate();

        const userId = interaction.user.id;
        const messageId = interaction.message.id;

        // Tratar cada tipo de bot√£o
        switch (interaction.customId) {
          case 'suggestion_upvote':
            // Aqui voc√™ pode adicionar l√≥gica para armazenar votos em um banco de dados
            console.log(`Usu√°rio ${userId} votou a favor da sugest√£o ${messageId}`);
            // Substitu√≠do logInteraction por logCommand
            await logger.logCommand(
              interaction,
              "Voto positivo em sugest√£o",
              `Usu√°rio: <@${userId}>\nMensagem: ${interaction.message.url}`
            );
            break;

          case 'suggestion_downvote':
            // L√≥gica para votos negativos
            console.log(`Usu√°rio ${userId} votou contra a sugest√£o ${messageId}`);
            // Substitu√≠do logInteraction por logCommand
            await logger.logCommand(
              interaction,
              "Voto negativo em sugest√£o",
              `Usu√°rio: <@${userId}>\nMensagem: ${interaction.message.url}`
            );
            break;

          case 'suggestion_comment':
            try {
              // Verificar se j√° existe um thread para esta mensagem
              const threads = await interaction.channel.threads.fetchActive();
              const existingThread = threads.threads.find(thread => 
                thread.starterId === interaction.message.id || 
                thread.name.includes(interaction.message.embeds[0].title.substring(0, 30))
              );
              
              if (existingThread) {
                // Se j√° existe um thread, apenas redirecionar o usu√°rio para ele
                await interaction.followUp({
                  content: `Um t√≥pico de discuss√£o j√° existe para esta sugest√£o. [Clique aqui para participar](https://discord.com/channels/${interaction.guild.id}/${existingThread.id})`,
                  flags: 64
                });
              } else {
                // Criar um novo thread a partir da mensagem da sugest√£o
                const threadName = `Discuss√£o: ${interaction.message.embeds[0].title.substring(0, 50)}`;
                
                const thread = await interaction.message.startThread({
                  name: threadName,
                  autoArchiveDuration: 60, // 1 hora
                  reason: 'Thread criada para discuss√£o da sugest√£o'
                });
                
                // Enviar uma mensagem inicial no thread
                await thread.send({
                  content: `Thread de discuss√£o criada por <@${interaction.user.id}>. Por favor, mantenha a discuss√£o civilizada e relacionada √† sugest√£o.`
                });
                
                // Informar o usu√°rio que o thread foi criado
                await interaction.followUp({
                  content: `‚úÖ Thread de discuss√£o criada com sucesso! [Clique aqui para participar](https://discord.com/channels/${interaction.guild.id}/${thread.id})`,
                  flags: 64
                });
                
                // Registrar a cria√ß√£o do thread
                await logger.logCommand(
                  interaction,
                  "Thread de sugest√£o criada",
                  `Usu√°rio: <@${userId}>\nSugest√£o: ${interaction.message.url}\nThread: ${thread.id}`
                );
              }
            } catch (threadError) {
              console.error('Erro ao criar thread:', threadError);
              await interaction.followUp({
                content: '‚ùå Ocorreu um erro ao criar o t√≥pico de discuss√£o.',
                flags: 64
              });
              await logger.logError("Cria√ß√£o de thread", threadError);
            }
            break;
        }
      } catch (error) {
        console.error(error);
        await logger.logError(`Intera√ß√£o de bot√£o ${interaction.customId}`, error);
        // Tentar enviar uma mensagem de erro para o usu√°rio
        try {
          await interaction.followUp({
            content: '‚ùå Ocorreu um erro ao processar sua intera√ß√£o.',
            flags: 64
          });
        } catch (followUpError) {
          console.error('Erro ao enviar mensagem de erro:', followUpError);
        }
      }
    }
  }
};
