const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const logger = require('../../utils/logger');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('sugestao')
        .setDescription('Envia uma sugest√£o para o servidor')
        .addStringOption(option =>
            option.setName('titulo')
                .setDescription('T√≠tulo da sugest√£o')
                .setRequired(true))
        .addStringOption(option =>
            option.setName('descricao')
                .setDescription('Descri√ß√£o detalhada da sugest√£o')
                .setRequired(true)),

    async execute(interaction, client) {
        const titulo = interaction.options.getString('titulo');
        const descricao = interaction.options.getString('descricao');

        try {
            const suggestionsChannel = client.channels.cache.get(client.config.SUGGESTION_CHANNEL_ID);
            if (!suggestionsChannel) {
                return interaction.reply({
                    content: '‚ùå Canal de sugest√µes n√£o configurado. Contate um administrador.',
                    ephemeral: true
                });
            }

            const embed = new EmbedBuilder()
                .setColor(0x0099FF)
                .setTitle(`Sugest√£o: ${titulo}`)
                .setDescription(descricao)
                .addFields(
                    { name: 'Autor', value: `<@${interaction.user.id}>`, inline: true },
                    { name: 'Status', value: '‚è≥ Em an√°lise', inline: true },
                    { name: 'Data', value: new Date().toLocaleDateString('pt-BR'), inline: true }
                )
                .setFooter({ text: 'Use os bot√µes abaixo para votar nesta sugest√£o' })
                .setTimestamp();

            const row = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId('suggestion_upvote')
                        .setLabel('üëç A favor')
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId('suggestion_downvote')
                        .setLabel('üëé Contra')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId('suggestion_comment')
                        .setLabel('üí¨ Comentar')
                        .setStyle(ButtonStyle.Primary)
                );

            const message = await suggestionsChannel.send({ embeds: [embed], components: [row] });

            // Adicionar rea√ß√µes iniciais
            await message.react('üëç');
            await message.react('üëé');

            await logger.logCommand(
                interaction,
                "Sugest√£o enviada",
                `Autor: <@${interaction.user.id}>\nT√≠tulo: ${titulo}\nMensagem: ${message.url}`
            );

            return interaction.reply({
                content: `‚úÖ Sua sugest√£o foi enviada com sucesso! Voc√™ pode v√™-la em <#${suggestionsChannel.id}>.`,
                ephemeral: true
            });
        } catch (error) {
            console.error(error);
            await logger.logError(`Comando ${interaction.commandName}`, error);
            return interaction.reply({
                content: '‚ùå Ocorreu um erro ao enviar sua sugest√£o.',
                ephemeral: true
            });
        }
    },

    // Adicionar o manipulador de intera√ß√µes para os bot√µes
    async handleInteraction(interaction, client) {
        if (!interaction.isButton()) return;

        // Verificar se √© um dos bot√µes de sugest√£o
        if (interaction.customId.startsWith('suggestion_')) {
            try {
                // Primeiro, informar ao Discord que recebemos a intera√ß√£o
                await interaction.deferUpdate();

                const userId = interaction.user.id;
                const messageId = interaction.message.id;
                
                // Tratar cada tipo de bot√£o
                switch (interaction.customId) {
                    case 'suggestion_upvote':
                        // Aqui voc√™ pode adicionar l√≥gica para armazenar votos em um banco de dados
                        console.log(`Usu√°rio ${userId} votou a favor da sugest√£o ${messageId}`);
                        await logger.logInteraction(
                            interaction,
                            "Voto positivo em sugest√£o",
                            `Usu√°rio: <@${userId}>\nMensagem: ${interaction.message.url}`
                        );
                        break;
                        
                    case 'suggestion_downvote':
                        // L√≥gica para votos negativos
                        console.log(`Usu√°rio ${userId} votou contra a sugest√£o ${messageId}`);
                        await logger.logInteraction(
                            interaction,
                            "Voto negativo em sugest√£o",
                            `Usu√°rio: <@${userId}>\nMensagem: ${interaction.message.url}`
                        );
                        break;
                        
                    case 'suggestion_comment':
                        // Para coment√°rios, enviamos uma mensagem ef√™mera
                        await interaction.followUp({
                            content: 'Para comentar nesta sugest√£o, responda diretamente √† mensagem no canal.',
                            ephemeral: true
                        });
                        
                        console.log(`Usu√°rio ${userId} tentou comentar na sugest√£o ${messageId}`);
                        await logger.logInteraction(
                            interaction,
                            "Tentativa de coment√°rio em sugest√£o",
                            `Usu√°rio: <@${userId}>\nMensagem: ${interaction.message.url}`
                        );
                        break;
                }
            } catch (error) {
                console.error(error);
                await logger.logError(`Intera√ß√£o de bot√£o ${interaction.customId}`, error);
                
                // Tentar enviar uma mensagem de erro para o usu√°rio
                try {
                    await interaction.followUp({
                        content: '‚ùå Ocorreu um erro ao processar sua intera√ß√£o.',
                        ephemeral: true
                    });
                } catch (followUpError) {
                    console.error('Erro ao enviar mensagem de erro:', followUpError);
                }
            }
        }
    }
};
